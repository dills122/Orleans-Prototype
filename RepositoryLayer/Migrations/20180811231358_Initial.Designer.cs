// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RepositoryLayer;

namespace RepositoryLayer.Migrations
{
    [DbContext(typeof(OrleansContext))]
    [Migration("20180811231358_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.1-rtm-30846")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("DataModels.Models.Document", b =>
                {
                    b.Property<Guid>("DocumentId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Created");

                    b.Property<string>("DocumentBaseSixFour");

                    b.Property<string>("DocumentExtension")
                        .IsRequired();

                    b.Property<string>("DocumentName")
                        .IsRequired();

                    b.Property<bool>("IsApproved");

                    b.Property<DateTime>("LastUpdated");

                    b.Property<string>("Location");

                    b.Property<Guid>("OrderId");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<int>("documentType");

                    b.HasKey("DocumentId");

                    b.HasIndex("OrderId");

                    b.ToTable("documents");
                });

            modelBuilder.Entity("DataModels.Models.Event", b =>
                {
                    b.Property<Guid>("EventId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("Created");

                    b.Property<long>("OrderId");

                    b.Property<Guid?>("OrderId1");

                    b.Property<int>("eventType");

                    b.HasKey("EventId");

                    b.HasIndex("OrderId1");

                    b.ToTable("events");
                });

            modelBuilder.Entity("DataModels.Models.Order", b =>
                {
                    b.Property<Guid>("OrderId")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("OrderDescription");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<string>("Username");

                    b.Property<int>("orderType");

                    b.HasKey("OrderId");

                    b.HasIndex("Username");

                    b.ToTable("orders");
                });

            modelBuilder.Entity("DataModels.Models.User", b =>
                {
                    b.Property<string>("Username")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(25);

                    b.Property<DateTime>("CreatedDate");

                    b.Property<string>("FName");

                    b.Property<string>("LName");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate();

                    b.Property<int>("accountType");

                    b.HasKey("Username");

                    b.ToTable("users");
                });

            modelBuilder.Entity("DataModels.Models.Document", b =>
                {
                    b.HasOne("DataModels.Models.Order", "order")
                        .WithMany()
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("DataModels.Models.Event", b =>
                {
                    b.HasOne("DataModels.Models.Order", "order")
                        .WithMany()
                        .HasForeignKey("OrderId1");
                });

            modelBuilder.Entity("DataModels.Models.Order", b =>
                {
                    b.HasOne("DataModels.Models.User", "user")
                        .WithMany("orders")
                        .HasForeignKey("Username");
                });
#pragma warning restore 612, 618
        }
    }
}
